{"version":3,"sources":["theme/colors.ts","theme/index.ts","utils/storage.ts","views/header/Header.tsx","views/content/Content.tsx","views/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Colors","Themes","colors","auroMetalSaurus","blackRussian","brightGrey","carabianGreen","darkGrey","floralWhite","greyChateau","solitude","white","commonColors","header","bg","footer","primary","themes","light","id","name","content","side","text","dark","useTheme","useState","chosenTheme","setChosenTheme","useEffect","localTheme","key","fallback","value","window","localStorage","getItem","JSON","parse","getLocalStorageItem","prefersDark","matchMedia","matches","setItem","stringify","Header","Layout","Text","Typography","StyledHeader","styled","theme","HeaderComponent","setTheme","isDarkTheme","checked","onChange","Content","StyledContent","Footer","App","style","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAAKA,E,mFAAAA,K,kCAAAA,E,4BAAAA,E,wBAAAA,E,8BAAAA,E,oBAAAA,E,0BAAAA,E,0BAAAA,E,oBAAAA,E,eAAAA,M,KAYL,I,ECLYC,EDiBGC,GAZqB,mBACjCF,EAAOG,gBAAkB,WADQ,cAEjCH,EAAOI,aAAe,WAFW,cAGjCJ,EAAOK,WAAa,WAHa,cAIjCL,EAAOM,cAAgB,WAJU,cAKjCN,EAAOO,SAAW,WALe,cAMjCP,EAAOQ,YAAc,WANY,cAOjCR,EAAOS,YAAc,WAPY,cAQjCT,EAAOU,SAAW,WARe,cASjCV,EAAOW,MAAQ,WATkB,I,SCLxBV,K,cAAAA,E,aAAAA,M,KAKZ,I,IAAMW,EAAe,CACnBC,OAAQ,CACNC,GAAIZ,EAAOE,cAEbW,OAAQ,CACND,GAAIZ,EAAOE,cAEbY,QAASd,EAAOI,eAGZW,GAAoC,mBACvChB,EAAOiB,MAAQ,CACdC,GAAI,QACJC,KAAM,cACNlB,OAAO,2BACFU,GADC,IAEJS,QAAS,CACPP,GAAIZ,EAAOQ,UAEbY,KAAM,CACJR,GAAIZ,EAAOQ,UAEba,KAAMrB,EAAOE,iBAZuB,cAevCH,EAAOuB,KAAO,CACbL,GAAI,QACJC,KAAM,aACNlB,OAAO,2BACFU,GADC,IAEJS,QAAS,CACPP,GAAIZ,EAAOK,UAEbe,KAAM,CACJR,GAAIZ,EAAOK,UAEbgB,KAAMrB,EAAOM,gBA1BuB,GA+B7BiB,EAAW,WACtB,MAAsCC,mBAAST,EAAOC,OAAtD,mBAAOS,EAAP,KAAoBC,EAApB,KAeA,OARAC,qBAAU,WAAO,IAAD,IACRC,EC1DyB,SAACC,EAAaC,GAC/C,IAAMC,EAAQC,OAAOC,aAAaC,QAAQL,GAE1C,OAAOE,EAAQI,KAAKC,MAAML,GAAd,OAAuBD,QAAvB,IAAuBA,IAAY,KDuD1BO,CAAoB,SACjCC,EAAW,WAAG,EAAAN,QAAOO,kBAAV,aAAG,SAClB,gCACAC,QACFd,GAAyB,OAAVE,QAAU,IAAVA,IAAcU,GAAcvB,EAAOO,KAAOP,EAAOC,SAC/D,IAEI,CAACS,EAbS,SAACR,GCxDe,IAACY,EAAaE,EAAbF,EDyDZ,QCzDyBE,EDyDhBd,ECxD/Be,OAAOC,aAAaQ,QAAQZ,EAAKM,KAAKO,UAAUX,IDyD9CL,EAAeX,EAAOE,OAcXF,I,wCElEP4B,EAAWC,IAAXD,OACAE,EAASC,IAATD,KAMFE,EAAeC,YAAOL,EAAPK,CAAH,kKAGI,qBAAGC,MAAkBjD,OAAOW,OAAOC,MAGjC,qBAAGqC,MAAkBjD,OAAOc,WAuBrCoC,EAnBmC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAG7CC,EAFQ7B,cAEYN,KAAOF,EAAOO,KAAKL,GAM7C,OACE,cAAC8B,EAAD,UACE,eAAC,IAAD,WACE,cAACF,EAAD,wBACA,cAAC,IAAD,CAAQQ,QAASD,EAAaE,SARhB,WAClBH,EAASC,EAAcrD,EAAOiB,MAAQjB,EAAOuB,eCzBzCiC,EAAYX,IAAZW,QAEFC,EAAgBR,YAAOO,EAAPP,CAAH,gGAEG,qBAAGC,MAAkBjD,OAAOmB,QAAQP,MAO3CsC,EAJa,WAC1B,OAAO,cAACM,EAAD,KCHDC,EAAWb,IAAXa,OAeOC,EAbC,WACd,MAA0BnC,IAA1B,mBAAO0B,EAAP,KAAcE,EAAd,KACA,OACE,cAAC,IAAD,CAAeF,MAAOA,EAAtB,SACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAQE,SAAUA,IAClB,cAAC,EAAD,IACA,cAACM,EAAD,CAAQE,MAAO,CAAEC,UAAW,UAA5B,qCCJOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72a43b7d.chunk.js","sourcesContent":["enum Colors {\n  auroMetalSaurus = 'auroMetalSaurus',\n  blackRussian = 'blackRussian',\n  brightGrey = 'brightGrey',\n  carabianGreen = 'carabianGreen',\n  darkGrey = 'darkGrey',\n  floralWhite = 'floralWhite',\n  greyChateau = 'greyChateau',\n  solitude = 'solitude',\n  white = 'white'\n}\n\nconst colors: Record<Colors, string> = {\n  [Colors.auroMetalSaurus]: '#767b83',\n  [Colors.blackRussian]: '#080809',\n  [Colors.brightGrey]: '#5c5f65',\n  [Colors.carabianGreen]: '#09b946',\n  [Colors.darkGrey]: '#121212',\n  [Colors.floralWhite]: '#f7f6f3',\n  [Colors.greyChateau]: '#9ca2ac',\n  [Colors.solitude]: '#f0f2f5',\n  [Colors.white]: '#ffffff'\n}\n\nexport default colors\n","import { useState, useEffect } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nimport { getLocalStorageItem, setLocalStorageItem } from './../utils/storage'\n\nimport colors from './colors'\n\nexport enum Themes {\n  light = 'light',\n  dark = 'dark'\n}\n\nconst commonColors = {\n  header: {\n    bg: colors.blackRussian\n  },\n  footer: {\n    bg: colors.blackRussian\n  },\n  primary: colors.carabianGreen\n}\n\nconst themes: Record<Themes, DefaultTheme> = {\n  [Themes.light]: {\n    id: 'T_001',\n    name: 'Light Theme',\n    colors: {\n      ...commonColors,\n      content: {\n        bg: colors.solitude\n      },\n      side: {\n        bg: colors.solitude\n      },\n      text: colors.blackRussian\n    }\n  },\n  [Themes.dark]: {\n    id: 'T_002',\n    name: 'Dark Theme',\n    colors: {\n      ...commonColors,\n      content: {\n        bg: colors.darkGrey\n      },\n      side: {\n        bg: colors.darkGrey\n      },\n      text: colors.floralWhite\n    }\n  }\n}\n\nexport const useTheme = (): [DefaultTheme, (id: Themes) => void] => {\n  const [chosenTheme, setChosenTheme] = useState(themes.light)\n\n  const setTheme = (id: Themes) => {\n    setLocalStorageItem('theme', id)\n    setChosenTheme(themes[id])\n  }\n\n  useEffect(() => {\n    const localTheme = getLocalStorageItem('theme')\n    const prefersDark = window.matchMedia?.(\n      '(prefers-color-scheme: dark)'\n    ).matches\n    setChosenTheme(localTheme ?? prefersDark ? themes.dark : themes.light)\n  }, [])\n\n  return [chosenTheme, setTheme]\n}\n\nexport default themes\n","export const setLocalStorageItem = (key: string, value: any) => {\n  window.localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport const getLocalStorageItem = (key: string, fallback?: any): any => {\n  const value = window.localStorage.getItem(key)\n\n  return value ? JSON.parse(value) : fallback ?? null\n}\n","import React, { FC } from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { Layout, Space, Switch, Typography } from 'antd'\n\nimport themes, { Themes } from '../../theme'\n\nconst { Header } = Layout\nconst { Text } = Typography\n\ninterface HeaderComponentProps {\n  setTheme: (theme: Themes) => void\n}\n\nconst StyledHeader = styled(Header)`\n  display: flex;\n  justify-content: flex-end;\n  background-color: ${({ theme }) => theme.colors.header.bg};\n\n  .ant-switch-checked {\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst HeaderComponent: FC<HeaderComponentProps> = ({ setTheme }) => {\n  const theme = useTheme()\n\n  const isDarkTheme = theme.id === themes.dark.id\n\n  const toggleTheme = () => {\n    setTheme(isDarkTheme ? Themes.light : Themes.dark)\n  }\n\n  return (\n    <StyledHeader>\n      <Space>\n        <Text>Dark Mode</Text>\n        <Switch checked={isDarkTheme} onChange={toggleTheme} />\n      </Space>\n    </StyledHeader>\n  )\n}\n\nexport default HeaderComponent\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { Layout } from 'antd'\n\nconst { Content } = Layout\n\nconst StyledContent = styled(Content)`\n  min-height: calc(100vh - 64px - 70px);\n  background-color: ${({ theme }) => theme.colors.content.bg};\n`\n\nconst HeaderComponent: FC = () => {\n  return <StyledContent></StyledContent>\n}\n\nexport default HeaderComponent\n","import React, { FC } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { Layout } from 'antd'\n\nimport { useTheme } from '../theme'\n\nimport { Header } from './header'\nimport { Content } from './content'\n\nconst { Footer } = Layout\n\nconst App: FC = () => {\n  const [theme, setTheme] = useTheme()\n  return (\n    <ThemeProvider theme={theme}>\n      <Layout>\n        <Header setTheme={setTheme} />\n        <Content />\n        <Footer style={{ textAlign: 'center' }}>Seboholi Â©2021</Footer>\n      </Layout>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './views/App'\n\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}